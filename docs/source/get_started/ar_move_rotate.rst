.. note:: 

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l‚Äôunivers de Raspberry Pi, Arduino et ESP32 avec d‚Äôautres passionn√©s et approfondissez vos connaissances.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : B√©n√©ficiez de l‚Äôaide de notre communaut√© et de notre √©quipe pour r√©soudre les probl√®mes apr√®s-vente et relever les d√©fis techniques.
    - **Apprentissage et partage** : √âchangez des conseils et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux exclusivit√©s.
    - **R√©ductions sp√©ciales** : Profitez d‚Äôoffres exclusives sur nos derni√®res innovations.
    - **Promotions et cadeaux festifs** : Participez √† des concours et √† des offres promotionnelles saisonni√®res.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd‚Äôhui !

3. D√©placement et Rotation
==============================

Dans ce projet, le Zeus Car peut inclure des param√®tres de rotation pour tourner sur place ou se d√©placer en arc de cercle.

**Comment proc√©der ?**

#. La ESP32-CAM et la carte Arduino partagent les m√™mes broches RX (r√©ception) et TX (transmission). Par cons√©quent, lorsque vous t√©l√©versez du code, vous devez d'abord d√©connecter la ESP32-CAM pour √©viter tout conflit ou probl√®me potentiel.

    .. image:: img/unplug_cam.png
        :width: 400
        :align: center

#. Ouvrez le fichier ``3_rotate_and_move.ino`` sous le chemin ``zeus-car-main\examples\3_rotate_and_move``.

    .. raw:: html

        <iframe src=https://create.arduino.cc/editor/sunfounder01/bf0dfe1b-18c1-4a45-bd38-a9a8e671d66a/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

#. Une fois le code t√©l√©vers√© avec succ√®s, mettez l'interrupteur d‚Äôalimentation sur ON pour d√©marrer le Zeus Car. Il tournera d'abord √† gauche puis √† droite pour revenir √† sa position initiale. Ensuite, le v√©hicule effectuera un mouvement en arc de cercle, avec un angle de rotation qui diminuera progressivement jusqu'√† tourner sur lui-m√™me.



**Comment cela fonctionne-t-il ?**

Un param√®tre de puissance de rotation ``rot`` est ajout√© √† la fonction de d√©placement ``carMove()`` du Zeus Car.

.. code-block::

    void carMove(int16_t angle, int8_t power, int8_t rot)

* ``angle`` : La direction dans laquelle vous voulez que le v√©hicule se d√©place. L'avant du v√©hicule est d√©fini comme 0 degr√© et l'angle augmente dans le sens antihoraire.
* ``power`` : La puissance du mouvement, avec une plage de -100 % √† 100 %. Une valeur positive fait avancer le v√©hicule, tandis qu'une valeur n√©gative le fait reculer.
* ``rot`` : La puissance de rotation, avec une plage de -100 % √† 100 %. Une valeur positive entra√Æne une rotation dans le sens antihoraire, et une valeur n√©gative dans le sens horaire.

Si ``power`` est √† 0 et que ``rot`` n'est pas √† 0, le Zeus Car tournera sur place. Plus la puissance de rotation est √©lev√©e, plus la vitesse de rotation est rapide. Une valeur positive entra√Æne une rotation antihoraire et une valeur n√©gative une rotation horaire.

Si ``power`` n'est pas 0, le Zeus Car effectuera un d√©placement en arc de cercle. L'angle de courbure augmentera avec la valeur de ``rot`` et, si cette valeur est suffisamment √©lev√©e, le v√©hicule finira par tourner sur lui-m√™me.
